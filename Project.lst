Microsoft (R) Macro Assembler Version 14.28.29337.0	    03/21/21 15:06:41
3String Primitives and Macros (StringPrimitives.asm	     Page 1 - 1


				TITLE String Primitives and Macros (StringPrimitives.asm)

				; Author: Lisa Bettcher
				; Last Modified: 03/16/2021
				; Description: This program prompts the user to enter 10 signed decimal integers
				;     small enough to fit in a 32 bit register. Then the program displays a list
				;     of the integers, the sum, and the average. It is assumed that the total
				;     sum of the valid numbers will fit inside a 32 bit register.


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; ----------------------------------------------------------------------------
				; Name: mGetString
				;
				; Displays a prompt and gets a string from the user.
				;
				; Preconditions: do not use eax, ebx, ecx, edx as arguments; mDisplayString
				;     is implemented and receives the address of a string to display.
				;
				; Receives:
				;     prompt     = address of prompt (string)
				;     buffer     = address of buffer 
				;     bufferSize = buffer size
				;     byteCount  = address of byteCount, to store number of characters
				;
				; Returns:
				;     buffer     = address containing user input string
				;     byteCount  = address containing number of characters entered
				; ----------------------------------------------------------------------------
				mGetString MACRO prompt:REQ, buffer:REQ, bufferSize:REQ, byteCount:REQ
				  push  eax
				  push  ebx
				  push  ecx
				  push  edx

				  ; display a prompt
				  mDisplayString prompt

				  ; get user keyboard input into memory location buffer
				  mov   edx, buffer
				  mov   ecx, bufferSize
				  call  ReadString
				  mov   ebx, byteCount              ; number of bytes read (length of string)
				  mov   [ebx], eax

				  pop   edx
				  pop   ecx
				  pop   ebx
				  pop   eax
				ENDM


				; ----------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Prints a string stored in a specified memory location.
				;
				; Preconditions: do not use edx as an argument.
				;
				; Receives:
				;     buffer = address of string to print
				; ----------------------------------------------------------------------------
				; buffer reference to string to print (input parameter, by reference)
				mDisplayString MACRO buffer:REQ
				  push  edx
				  mov   edx, buffer
				  call  WriteString
				  pop   edx
				ENDM


 = 0000000A			NUMS            =       10
 = "10"				NUMS_STR        TEXTEQU <">, %NUMS, <">


 00000000			.data
 00000000 44 65 73 69 67	  titleName     BYTE    "Designing low-level I/O procedures",
	   6E 69 6E 67 20
	   6C 6F 77 2D 6C
	   65 76 65 6C 20
	   49 2F 4F 20 70
	   72 6F 63 65 64
	   75 72 65 73 0D
	   0A 57 72 69 74
	   74 65 6E 20 62
	   79 3A 20 4C 69
	   73 61 20 42 65
	   74 74 63 68 65
	   72 0D 0A 0D 0A
	   00
				                        13,10,"Written by: Lisa Bettcher",13,10,13,10,0
 00000042 50 6C 65 61 73	  instruct      BYTE    "Please provide ",NUMS_STR," signed decimal integers.",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 0D 0A
	   41 66 74 65 72
	   20 79 6F 75 20
	   66 69 6E 69 73
	   68 20 69 6E 70
	   75 74 74 69 6E
	   67 20 74 68 65
	   20 72 61 77 20
	   6E 75 6D 62 65
	   72 73 20 49 20
	   77 69 6C 6C 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   6C 69 73 74 20
	   6F 66 0D 0A 74
	   68 65 20 69 6E
	   74 65 67 65 72
	   73 2C 20 74 68
	   65 69 72 20 73
	   75 6D 2C 20 61
	   6E 64 20 74 68
	   65 69 72 20 61
	   76 65 72 61 67
	   65 20 76 61 6C
	   75 65 2E 0D 0A
	   0D 0A 00
				                        "Each number needs to be small enough to fit inside a 32 ",
				                        "bit register.",13,10,"After you finish inputting the raw numbers ",
				                        "I will display a list of",13,10,"the integers, their sum, ",
				                        "and their average value.",13,10,13,10,0
 00000130 50 6C 65 61 73	  prompt        BYTE    "Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000014F 45 52 52 4F 52	  errorMsg      BYTE    "ERROR: You did not enter a signed number ",
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 0D 0A
	   00
				                        "or your number was too big.",13,10,0
 00000196 50 6C 65 61 73	  reprompt      BYTE    "Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 000001A9 0D 0A 0D 0A 59	  enteredTitle  BYTE    13,10,13,10,"You entered the following numbers:",13,10,0
	   6F 75 20 65 6E
	   74 65 72 65 64
	   20 74 68 65 20
	   66 6F 6C 6C 6F
	   77 69 6E 67 20
	   6E 75 6D 62 65
	   72 73 3A 0D 0A
	   00
 000001D2 0D 0A 54 68 65	  sumTitle      BYTE    13,10,"The sum of these numbers is: ",0
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 73 65 20 6E
	   75 6D 62 65 72
	   73 20 69 73 3A
	   20 00
 000001F2 0D 0A 54 68 65	  averageTitle  BYTE    13,10,"The rounded (floor) average is: ",0
	   20 72 6F 75 6E
	   64 65 64 20 28
	   66 6C 6F 6F 72
	   29 20 61 76 65
	   72 61 67 65 20
	   69 73 3A 20 00
 00000215 0D 0A 0D 0A 54	  closingMsg    BYTE    13,10,13,10,"Thanks for playing!",0
	   68 61 6E 6B 73
	   20 66 6F 72 20
	   70 6C 61 79 69
	   6E 67 21 00
 0000022D 2C 20 00		  commaSpace    BYTE    ", ",0
 00000230  00000020 [		  stringBuffer  BYTE    32 DUP(?)
	    00
	   ]
 00000250  00000020 [		  reverseBuffer BYTE    32 DUP(?)
	    00
	   ]
 00000270 00000000		  charCount     DWORD   ?           ; number of bytes entered by user
 00000274 00000000		  userNumber    SDWORD  ?           ; user string converted to number
 00000278  0000000A [		  numArray      SDWORD  NUMS DUP(?) ; user entered numbers
	    00000000
	   ]
 000002A0 00000000		  sum           SDWORD  ?

				  ; EC1
 000002A4 2A 2A 45 43 20	  extraCredit1  BYTE    "**EC 1: Number each line of user input and display a ",
	   31 3A 20 4E 75
	   6D 62 65 72 20
	   65 61 63 68 20
	   6C 69 6E 65 20
	   6F 66 20 75 73
	   65 72 20 69 6E
	   70 75 74 20 61
	   6E 64 20 64 69
	   73 70 6C 61 79
	   20 61 20 72 75
	   6E 6E 69 6E 67
	   20 73 75 62 74
	   6F 74 61 6C 2E
	   0D 0A 0D 0A 00
				                        "running subtotal.",13,10,13,10,0
 000002EF 2E 20 53 75 62	  dotSubtotal   BYTE    ". Subtotal: ",0
	   74 6F 74 61 6C
	   3A 20 00
 000002FC 2E 20 00		  dotSpace      BYTE    ". ",0

 00000000			.code
 00000000			main PROC

				  ; introduction
				  mDisplayString OFFSET titleName
 00000000  52		     1	  push  edx
 00000001  BA 00000000 R     1	  mov   edx, OFFSET titleName
 00000006  E8 00000000 E     1	  call  WriteString
 0000000B  5A		     1	  pop   edx
				  mDisplayString OFFSET extraCredit1
 0000000C  52		     1	  push  edx
 0000000D  BA 000002A4 R     1	  mov   edx, OFFSET extraCredit1
 00000012  E8 00000000 E     1	  call  WriteString
 00000017  5A		     1	  pop   edx
				  mDisplayString OFFSET instruct
 00000018  52		     1	  push  edx
 00000019  BA 00000042 R     1	  mov   edx, OFFSET instruct
 0000001E  E8 00000000 E     1	  call  WriteString
 00000023  5A		     1	  pop   edx

				  ; get 10 valid integers from user, store in array
 00000024  C7 05 000002A0 R	  mov   sum, 0
	   00000000
 0000002E  BF 00000278 R	  mov   edi, OFFSET numArray
 00000033  B9 0000000A		  mov   ecx, LENGTHOF numArray

 00000038			_GetNumbers:
				  ; EC1: number Line of input and display subtotal using WriteVal
 00000038  68 00000230 R	  push  OFFSET stringBuffer
 0000003D  68 00000250 R	  push  OFFSET reverseBuffer
 00000042  BB 0000000B		  mov   ebx, NUMS+1
 00000047  2B D9		  sub   ebx, ecx
 00000049  53			  push  ebx
 0000004A  E8 000001E1		  call  WriteVal                    ; display number line of input
				  mDisplayString OFFSET dotSubtotal
 0000004F  52		     1	  push  edx
 00000050  BA 000002EF R     1	  mov   edx, OFFSET dotSubtotal
 00000055  E8 00000000 E     1	  call  WriteString
 0000005A  5A		     1	  pop   edx
 0000005B  68 00000230 R	  push  OFFSET stringBuffer
 00000060  68 00000250 R	  push  OFFSET reverseBuffer
 00000065  FF 35 000002A0 R	  push  sum
 0000006B  E8 000001C0		  call  WriteVal                    ; display subtotal
				  mDisplayString OFFSET dotSpace
 00000070  52		     1	  push  edx
 00000071  BA 000002FC R     1	  mov   edx, OFFSET dotSpace
 00000076  E8 00000000 E     1	  call  WriteString
 0000007B  5A		     1	  pop   edx

				  ; get number from user
 0000007C  68 00000250 R	  push  OFFSET reverseBuffer        ; [ebp+72] EC1: use with WriteVal
 00000081  53			  push  ebx                         ; [ebp+68] EC1: input line number
 00000082  68 000002FC R	  push  OFFSET dotSpace             ; [ebp+64] EC1: print ". " after line number
 00000087  68 00000196 R	  push  OFFSET reprompt
 0000008C  68 00000274 R	  push  OFFSET userNumber
 00000091  68 0000014F R	  push  OFFSET errorMsg
 00000096  68 00000270 R	  push  OFFSET charCount
 0000009B  6A 20		  push  SIZEOF stringBuffer
 0000009D  68 00000230 R	  push  OFFSET stringBuffer
 000000A2  68 00000130 R	  push  OFFSET prompt
 000000A7  E8 000000BB		  call  ReadVal
 000000AC  A1 00000274 R	  mov   eax, userNumber
 000000B1  01 05 000002A0 R	  add   sum, eax
 000000B7  89 07		  mov   [edi], eax                  ; store number in array
 000000B9  83 C7 04		  add   edi, TYPE numArray
 000000BC  49			  dec   ecx
 000000BD  83 F9 00		  cmp   ecx, 0
 000000C0  74 05		  jz    _DisplayNumbers
 000000C2  E9 FFFFFF71		  jmp   _GetNumbers

 000000C7			_DisplayNumbers:
				  ; display the numbers
				  mDisplayString OFFSET enteredTitle
 000000C7  52		     1	  push  edx
 000000C8  BA 000001A9 R     1	  mov   edx, OFFSET enteredTitle
 000000CD  E8 00000000 E     1	  call  WriteString
 000000D2  5A		     1	  pop   edx
 000000D3  BE 00000278 R	  mov   esi, OFFSET numArray
 000000D8  B9 0000000A		  mov   ecx, LENGTHOF numArray
 000000DD			_DisplayNumbersLoop:
 000000DD  68 00000230 R	  push  OFFSET stringBuffer
 000000E2  68 00000250 R	  push  OFFSET reverseBuffer
 000000E7  FF 36		  push  [esi]                       ; number in array
 000000E9  E8 00000142		  call  WriteVal
 000000EE  83 C6 04		  add   esi, TYPE numArray
 000000F1  83 F9 01		  cmp   ecx, 1
 000000F4  74 0C		  je    _SkipComma                  ; no comma after last number
				  mDisplayString OFFSET commaSpace
 000000F6  52		     1	  push  edx
 000000F7  BA 0000022D R     1	  mov   edx, OFFSET commaSpace
 000000FC  E8 00000000 E     1	  call  WriteString
 00000101  5A		     1	  pop   edx
 00000102			_SkipComma:
 00000102  E2 D9		  loop  _DisplayNumbersLoop

				  ; display sum
				  mDisplayString OFFSET sumTitle
 00000104  52		     1	  push  edx
 00000105  BA 000001D2 R     1	  mov   edx, OFFSET sumTitle
 0000010A  E8 00000000 E     1	  call  WriteString
 0000010F  5A		     1	  pop   edx
 00000110  68 00000230 R	  push  OFFSET stringBuffer
 00000115  68 00000250 R	  push  OFFSET reverseBuffer
 0000011A  FF 35 000002A0 R	  push  sum
 00000120  E8 0000010B		  call  WriteVal

				  ; display rounded average (floor)
				  mDisplayString OFFSET averageTitle
 00000125  52		     1	  push  edx
 00000126  BA 000001F2 R     1	  mov   edx, OFFSET averageTitle
 0000012B  E8 00000000 E     1	  call  WriteString
 00000130  5A		     1	  pop   edx
 00000131  A1 000002A0 R	  mov   eax, sum
 00000136  99			  cdq
 00000137  BB 0000000A		  mov   ebx, NUMS
 0000013C  F7 FB		  idiv  ebx
 0000013E  83 FA 00		  cmp   edx, 0                      ; if negative remainder, floor rounds down
 00000141  7D 01		  jge   _DisplayAverage
 00000143  48			  dec   eax

 00000144			_DisplayAverage:
 00000144  68 00000230 R	  push  OFFSET stringBuffer
 00000149  68 00000250 R	  push  OFFSET reverseBuffer
 0000014E  50			  push  eax                         ; quotient = rounded average floor for pos
 0000014F  E8 000000DC		  call  WriteVal

				  ; display closing message
				  mDisplayString OFFSET closingMsg
 00000154  52		     1	  push  edx
 00000155  BA 00000215 R     1	  mov   edx, OFFSET closingMsg
 0000015A  E8 00000000 E     1	  call  WriteString
 0000015F  5A		     1	  pop   edx

				  INVOKE ExitProcess,0
 00000160  6A 00	   *	    push   +000000000h
 00000162  E8 00000000 E   *	    call   ExitProcess
 00000167			main ENDP


				; ----------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Gets user input string and convert to numeric value representation (SDWORD).
				;
				; Preconditions: mGetString is implemented and receives the address of prompt,
				;     the address of stringBuffer, size of stringBuffer, and address of
				;     charCount. WriteVal is implemented to display input line number (EC1).
				;
				; Postconditions: none.
				;
				; Receives:
				;     [ebp+36]  = reference to prompt
				;     [ebp+40]  = reference to stringBuffer
				;     [ebp+44]  = size of stringBuffer
				;     [ebp+48]  = reference to charCount
				;     [ebp+52]  = reference to errorMsg
				;     [ebp+56]  = reference to userNumber
				;     [ebp+60]  = reference to reprompt
				;     [epb+64]  = reference to dotSpace
				;     [epb+68]  = value of input line number to print
				;     [epb+72]  = reference to reverseBuffer
				;
				; Returns: valid numeric value in userNumber
				; ----------------------------------------------------------------------------
 00000167			ReadVal PROC
 00000167  60			  pushad
 00000168  8B EC		  mov   ebp, esp

				  ; @prompt, @stringBuffer, sizeof stringBuffer, @charCount
				  mGetString [ebp+36], [ebp+40], [ebp+44], [ebp+48]
 0000016A  50		     1	  push  eax
 0000016B  53		     1	  push  ebx
 0000016C  51		     1	  push  ecx
 0000016D  52		     1	  push  edx
 0000016E  52		     2	  push  edx
 0000016F  8B 55 24	     2	  mov   edx, [ebp+36]
 00000172  E8 00000000 E     2	  call  WriteString
 00000177  5A		     2	  pop   edx
 00000178  8B 55 28	     1	  mov   edx, [ebp+40]
 0000017B  8B 4D 2C	     1	  mov   ecx, [ebp+44]
 0000017E  E8 00000000 E     1	  call  ReadString
 00000183  8B 5D 30	     1	  mov   ebx, [ebp+48]              ; number of bytes read (length of string)
 00000186  89 03	     1	  mov   [ebx], eax
 00000188  5A		     1	  pop   edx
 00000189  59		     1	  pop   ecx
 0000018A  5B		     1	  pop   ebx
 0000018B  58		     1	  pop   eax

				  ; validate and convert string to numeric value (SDWORD)
 0000018C			_ProcessInput:
 0000018C  8B 75 28		  mov   esi, [ebp+40]               ; reference to stringBuffer
 0000018F  8B 55 30		  mov   edx, [ebp+48]               ; reference to charCount
 00000192  8B 0A		  mov   ecx, [edx]                  ; charCount value
 00000194  BF 00000000		  mov   edi, 0                      ; accumulate integer value
 00000199  BB 00000000		  mov   ebx, 0                      ; 0 is positive, 1 is negative

				  ; validate
				  ; check for empty input
 0000019E  83 F9 00		  cmp   ecx, 0
 000001A1  74 3B		  jz    _Invalid

				  ; check size for 32-bit register
 000001A3  83 F9 0B		  cmp   ecx, 11                     ; max value is 10 digits and a possible sign
 000001A6  7F 36		  jg    _Invalid

 000001A8  FC			  cld
				  ; check first char for + and -
 000001A9  AC			  lodsb
 000001AA  3C 2B		  cmp   al, 43                      ; +
 000001AC  74 0D		  je    _FirstSign
 000001AE  3C 2D		  cmp   al, 45                      ; -
 000001B0  74 08		  je    _Negative
				  ; first char is not a sign, set pointer back to load first char again
 000001B2  4E			  dec   esi
				  ; check size for 32-bit register
 000001B3  83 F9 0A		  cmp   ecx, 10                     ; max value is 10 digits without sign
 000001B6  7F 26		  jg    _Invalid
 000001B8  EB 02		  jmp   _CharToInt

 000001BA			_Negative:
 000001BA  43			  inc   ebx                         ; 1 is negative

 000001BB			_FirstSign:
 000001BB  49			  dec   ecx                         ; dec loop counter for sign char

 000001BC			_CharToInt:
 000001BC  AC			  lodsb
 000001BD  3C 30		  cmp   al, 48                      ; 0
 000001BF  7C 1D		  jl    _Invalid
 000001C1  3C 39		  cmp   al, 57                      ; 9
 000001C3  7F 19		  jg    _Invalid
 000001C5  2C 30		  sub   al, 48                      ; numInt = 10 * numInt + (numChar - 48)
 000001C7  6B FF 0A		  imul  edi, 10
 000001CA  0F BE C0		  movsx eax, al
 000001CD  83 FB 00		  cmp   ebx, 0                      ; add or subtract, ebx = 0 positive (add)
 000001D0  74 04		  je    _Add
 000001D2  2B F8		  sub   edi, eax
 000001D4  EB 02		  jmp   _CheckOverflow

 000001D6			_Add:
 000001D6  03 F8		  add   edi, eax

 000001D8			_CheckOverflow:
 000001D8  70 04		  jo    _Invalid
 000001DA  E2 E0		  loop  _CharToInt

 000001DC  EB 49		  jmp   _StoreNumber

 000001DE			_Invalid:
				  mDisplayString [ebp+52]           ; error message
 000001DE  52		     1	  push  edx
 000001DF  8B 55 34	     1	  mov   edx, [ebp+52]
 000001E2  E8 00000000 E     1	  call  WriteString
 000001E7  5A		     1	  pop   edx

				  ; EC1: display input line number with WriteVal
 000001E8  FF 75 28		  push  [ebp+40]
 000001EB  FF 75 48		  push  [ebp+72]
 000001EE  FF 75 44		  push  [ebp+68]
 000001F1  E8 0000003A		  call  WriteVal
				  mDisplayString [ebp+64]           ; print dotSpace
 000001F6  52		     1	  push  edx
 000001F7  8B 55 40	     1	  mov   edx, [ebp+64]
 000001FA  E8 00000000 E     1	  call  WriteString
 000001FF  5A		     1	  pop   edx

				  ; @reprompt, @stringBuffer, sizeof stringBuffer, @charCount
				  mGetString [ebp+60], [ebp+40], [ebp+44], [ebp+48]
 00000200  50		     1	  push  eax
 00000201  53		     1	  push  ebx
 00000202  51		     1	  push  ecx
 00000203  52		     1	  push  edx
 00000204  52		     2	  push  edx
 00000205  8B 55 3C	     2	  mov   edx, [ebp+60]
 00000208  E8 00000000 E     2	  call  WriteString
 0000020D  5A		     2	  pop   edx
 0000020E  8B 55 28	     1	  mov   edx, [ebp+40]
 00000211  8B 4D 2C	     1	  mov   ecx, [ebp+44]
 00000214  E8 00000000 E     1	  call  ReadString
 00000219  8B 5D 30	     1	  mov   ebx, [ebp+48]              ; number of bytes read (length of string)
 0000021C  89 03	     1	  mov   [ebx], eax
 0000021E  5A		     1	  pop   edx
 0000021F  59		     1	  pop   ecx
 00000220  5B		     1	  pop   ebx
 00000221  58		     1	  pop   eax
 00000222  E9 FFFFFF65		  jmp   _ProcessInput

 00000227			_StoreNumber:
 00000227  8B 55 38		  mov   edx, [ebp+56]               ; reference to userNumber variable
 0000022A  89 3A		  mov   [edx], edi                  ; store integer value at userNumber

 0000022C  61			  popad
 0000022D  C2 0028		  ret   40
 00000230			ReadVal ENDP

				; ----------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Converts numeric SDWORD value to string of ascii digits and displays the string.
				;
				; Preconditions: mDisplayString is implemented and receives the address of a
				;     string to display.
				;
				; Receives:
				;     [ebp+36] = numeric SDWORD value
				;     [ebp+40] = reference to reverseBuffer
				;     [ebp+44] = reference to stringBuffer
				; ----------------------------------------------------------------------------
 00000230			WriteVal PROC
 00000230  60			  pushad
 00000231  8B EC		  mov   ebp, esp

 00000233  8B 45 24		  mov   eax, [ebp+36]
 00000236  8B 7D 28		  mov   edi, [ebp+40]
 00000239  BE 00000000		  mov   esi, 0                      ; number is pos/neg (0 pos, else neg)
 0000023E  B9 00000000		  mov   ecx, 0                      ; count how many chars are written

 00000243  FC			  cld
 00000244  83 F8 00		  cmp   eax, 0                      ; check if number is pos/neg
 00000247  7D 01		  jge   _IntToString
 00000249  4E			  dec   esi                         ; neg number esi = -1

 0000024A			_IntToString:
				  ; divide number by 10 and store remainder until quotient is 0
 0000024A  99			  cdq
 0000024B  BB 0000000A		  mov   ebx, 10
 00000250  F7 FB		  idiv  ebx
 00000252  83 FE 00		  cmp   esi, 0                      ; esi = 0 means positive number
 00000255  74 02		  jz    _IntToChar
 00000257  F7 DA		  neg   edx                         ; change negative remainder to positive
 00000259			_IntToChar:
 00000259  83 C2 30		  add   edx, 48                     ; remainder + 48 = ascii for "0" to "9"
 0000025C  50			  push  eax                         ; save quotient
 0000025D  8B C2		  mov   eax, edx
 0000025F  AA			  stosb
 00000260  41			  inc   ecx
 00000261  58			  pop   eax                         ; restore quotient
 00000262  83 F8 00		  cmp   eax, 0                      ; stop if quotient is 0
 00000265  75 E3		  jnz   _IntToString
 00000267  83 FE 00		  cmp   esi, 0
 0000026A  74 04		  jz    _ReverseString
 0000026C  B0 2D		  mov   al, "-"                     ; store "-" if neg
 0000026E  AA			  stosb
 0000026F  41			  inc   ecx

 00000270			_ReverseString:
 00000270  8B F7		  mov   esi, edi                    ; reverse string is now source
 00000272  4E			  dec   esi                         ; pointer was one past the end
 00000273  8B 7D 2C		  mov   edi, [ebp+44]
 00000276			_ReverseLoop:
 00000276  FD			  std                               ; read esi in reverse
 00000277  AC			  lodsb
 00000278  FC			  cld                               ; write edi forward
 00000279  AA			  stosb
 0000027A  E2 FA		  loop  _ReverseLoop
 0000027C  B0 00		  mov   al, 0                       ; add null terminator to stringBuffer
 0000027E  AA			  stosb
				  mDisplayString [ebp+44]
 0000027F  52		     1	  push  edx
 00000280  8B 55 2C	     1	  mov   edx, [ebp+44]
 00000283  E8 00000000 E     1	  call  WriteString
 00000288  5A		     1	  pop   edx

 00000289  61			  popad
 0000028A  C2 000C		  ret   12
 0000028D			WriteVal ENDP

				END main
Microsoft (R) Macro Assembler Version 14.28.29337.0	    03/21/21 15:06:41
3String Primitives and Macros (StringPrimitives.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002FF Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000028D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000167 _TEXT	Length= 000000C9 Public STDCALL
  _ProcessInput  . . . . . . . .	L Near	 0000018C _TEXT	
  _Negative  . . . . . . . . . .	L Near	 000001BA _TEXT	
  _FirstSign . . . . . . . . . .	L Near	 000001BB _TEXT	
  _CharToInt . . . . . . . . . .	L Near	 000001BC _TEXT	
  _Add . . . . . . . . . . . . .	L Near	 000001D6 _TEXT	
  _CheckOverflow . . . . . . . .	L Near	 000001D8 _TEXT	
  _Invalid . . . . . . . . . . .	L Near	 000001DE _TEXT	
  _StoreNumber . . . . . . . . .	L Near	 00000227 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000230 _TEXT	Length= 0000005D Public STDCALL
  _IntToString . . . . . . . . .	L Near	 0000024A _TEXT	
  _IntToChar . . . . . . . . . .	L Near	 00000259 _TEXT	
  _ReverseString . . . . . . . .	L Near	 00000270 _TEXT	
  _ReverseLoop . . . . . . . . .	L Near	 00000276 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000167 Public STDCALL
  _GetNumbers  . . . . . . . . .	L Near	 00000038 _TEXT	
  _DisplayNumbers  . . . . . . .	L Near	 000000C7 _TEXT	
  _DisplayNumbersLoop  . . . . .	L Near	 000000DD _TEXT	
  _SkipComma . . . . . . . . . .	L Near	 00000102 _TEXT	
  _DisplayAverage  . . . . . . .	L Near	 00000144 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMS_STR . . . . . . . . . . . .	Text   	 "10"
NUMS . . . . . . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averageTitle . . . . . . . . . .	Byte	 000001F2 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
charCount  . . . . . . . . . . .	DWord	 00000270 _DATA	
closingMsg . . . . . . . . . . .	Byte	 00000215 _DATA	
commaSpace . . . . . . . . . . .	Byte	 0000022D _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dotSpace . . . . . . . . . . . .	Byte	 000002FC _DATA	
dotSubtotal  . . . . . . . . . .	Byte	 000002EF _DATA	
enteredTitle . . . . . . . . . .	Byte	 000001A9 _DATA	
errorMsg . . . . . . . . . . . .	Byte	 0000014F _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraCredit1 . . . . . . . . . .	Byte	 000002A4 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instruct . . . . . . . . . . . .	Byte	 00000042 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000278 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000130 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
reprompt . . . . . . . . . . . .	Byte	 00000196 _DATA	
reverseBuffer  . . . . . . . . .	Byte	 00000250 _DATA	
stringBuffer . . . . . . . . . .	Byte	 00000230 _DATA	
sumTitle . . . . . . . . . . . .	Byte	 000001D2 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 000002A0 _DATA	
titleName  . . . . . . . . . . .	Byte	 00000000 _DATA	
userNumber . . . . . . . . . . .	DWord	 00000274 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
